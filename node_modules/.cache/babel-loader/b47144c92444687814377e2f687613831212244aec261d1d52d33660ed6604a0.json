{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nfunction AutoFillHandler({\n  appUrl,\n  credentials\n}) {\n  _s();\n  useEffect(() => {\n    const handleAutoFill = async () => {\n      try {\n        // Create and inject the autofill script directly\n        const script = document.createElement('script');\n        script.textContent = `\n          // Function to find input fields\n          const findInputField = (type) => {\n            const selectors = [\n              \\`input[type=\"\\${type}\"]\\`,\n              \\`input[name*=\"\\${type}\"]\\`,\n              \\`input[id*=\"\\${type}\"]\\`,\n              \\`input[placeholder*=\"\\${type}\"]\\`,\n              \\`input[aria-label*=\"\\${type}\"]\\`\n            ];\n            \n            for (const selector of selectors) {\n              const elements = document.querySelectorAll(selector);\n              for (const element of elements) {\n                if (element.offsetParent !== null) { // Check if element is visible\n                  return element;\n                }\n              }\n            }\n            return null;\n          };\n\n          // Find and fill email/username field\n          const emailField = findInputField('email') || findInputField('text');\n          if (emailField && '${credentials.username}') {\n            emailField.value = '${credentials.username}';\n            emailField.dispatchEvent(new Event('input', { bubbles: true }));\n            emailField.dispatchEvent(new Event('change', { bubbles: true }));\n          }\n\n          // Find and fill password field\n          const passwordField = findInputField('password');\n          if (passwordField && '${credentials.password}') {\n            passwordField.value = '${credentials.password}';\n            passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n            passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n          }\n\n          // Try to find and click the submit button\n          const submitButton = document.querySelector('button[type=\"submit\"], input[type=\"submit\"]');\n          if (submitButton) {\n            setTimeout(() => {\n              submitButton.click();\n            }, 500); // Small delay to ensure fields are filled\n          }\n        `;\n        document.body.appendChild(script);\n        // Remove the script after execution\n        script.remove();\n      } catch (error) {\n        console.error('Autofill error:', error);\n      }\n    };\n\n    // Check if we're on the target application's login page\n    const isLoginPage = window.location.href.includes(appUrl);\n    if (isLoginPage && credentials) {\n      handleAutoFill();\n    }\n  }, [appUrl, credentials]);\n  return null; // This component doesn't render anything\n}\n_s(AutoFillHandler, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = AutoFillHandler;\nexport default AutoFillHandler;\nvar _c;\n$RefreshReg$(_c, \"AutoFillHandler\");","map":{"version":3,"names":["useEffect","AutoFillHandler","appUrl","credentials","_s","handleAutoFill","script","document","createElement","textContent","username","password","body","appendChild","remove","error","console","isLoginPage","window","location","href","includes","_c","$RefreshReg$"],"sources":["/Users/jaysingh/sample2/src/components/AutoFillHandler.js"],"sourcesContent":["import { useEffect } from 'react';\n\nfunction AutoFillHandler({ appUrl, credentials }) {\n  useEffect(() => {\n    const handleAutoFill = async () => {\n      try {\n        // Create and inject the autofill script directly\n        const script = document.createElement('script');\n        script.textContent = `\n          // Function to find input fields\n          const findInputField = (type) => {\n            const selectors = [\n              \\`input[type=\"\\${type}\"]\\`,\n              \\`input[name*=\"\\${type}\"]\\`,\n              \\`input[id*=\"\\${type}\"]\\`,\n              \\`input[placeholder*=\"\\${type}\"]\\`,\n              \\`input[aria-label*=\"\\${type}\"]\\`\n            ];\n            \n            for (const selector of selectors) {\n              const elements = document.querySelectorAll(selector);\n              for (const element of elements) {\n                if (element.offsetParent !== null) { // Check if element is visible\n                  return element;\n                }\n              }\n            }\n            return null;\n          };\n\n          // Find and fill email/username field\n          const emailField = findInputField('email') || findInputField('text');\n          if (emailField && '${credentials.username}') {\n            emailField.value = '${credentials.username}';\n            emailField.dispatchEvent(new Event('input', { bubbles: true }));\n            emailField.dispatchEvent(new Event('change', { bubbles: true }));\n          }\n\n          // Find and fill password field\n          const passwordField = findInputField('password');\n          if (passwordField && '${credentials.password}') {\n            passwordField.value = '${credentials.password}';\n            passwordField.dispatchEvent(new Event('input', { bubbles: true }));\n            passwordField.dispatchEvent(new Event('change', { bubbles: true }));\n          }\n\n          // Try to find and click the submit button\n          const submitButton = document.querySelector('button[type=\"submit\"], input[type=\"submit\"]');\n          if (submitButton) {\n            setTimeout(() => {\n              submitButton.click();\n            }, 500); // Small delay to ensure fields are filled\n          }\n        `;\n        \n        document.body.appendChild(script);\n        // Remove the script after execution\n        script.remove();\n      } catch (error) {\n        console.error('Autofill error:', error);\n      }\n    };\n\n    // Check if we're on the target application's login page\n    const isLoginPage = window.location.href.includes(appUrl);\n    if (isLoginPage && credentials) {\n      handleAutoFill();\n    }\n  }, [appUrl, credentials]);\n\n  return null; // This component doesn't render anything\n}\n\nexport default AutoFillHandler; "],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AAEjC,SAASC,eAAeA,CAAC;EAAEC,MAAM;EAAEC;AAAY,CAAC,EAAE;EAAAC,EAAA;EAChDJ,SAAS,CAAC,MAAM;IACd,MAAMK,cAAc,GAAG,MAAAA,CAAA,KAAY;MACjC,IAAI;QACF;QACA,MAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;QAC/CF,MAAM,CAACG,WAAW,GAAG;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+BN,WAAW,CAACO,QAAQ;AACnD,kCAAkCP,WAAW,CAACO,QAAQ;AACtD;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkCP,WAAW,CAACQ,QAAQ;AACtD,qCAAqCR,WAAW,CAACQ,QAAQ;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;QAEDJ,QAAQ,CAACK,IAAI,CAACC,WAAW,CAACP,MAAM,CAAC;QACjC;QACAA,MAAM,CAACQ,MAAM,CAAC,CAAC;MACjB,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACzC;IACF,CAAC;;IAED;IACA,MAAME,WAAW,GAAGC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAACC,QAAQ,CAACnB,MAAM,CAAC;IACzD,IAAIe,WAAW,IAAId,WAAW,EAAE;MAC9BE,cAAc,CAAC,CAAC;IAClB;EACF,CAAC,EAAE,CAACH,MAAM,EAAEC,WAAW,CAAC,CAAC;EAEzB,OAAO,IAAI,CAAC,CAAC;AACf;AAACC,EAAA,CArEQH,eAAe;AAAAqB,EAAA,GAAfrB,eAAe;AAuExB,eAAeA,eAAe;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}