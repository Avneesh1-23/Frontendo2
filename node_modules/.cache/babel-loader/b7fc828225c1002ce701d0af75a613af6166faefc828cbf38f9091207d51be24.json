{"ast":null,"code":"const API_URL = 'http://localhost:5000/api';\nexport const api = {\n  // Applications\n  getApplications: async () => {\n    const response = await fetch(`${API_URL}/applications`);\n    return response.json();\n  },\n  createApplication: async application => {\n    const response = await fetch(`${API_URL}/applications`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(application)\n    });\n    return response.json();\n  },\n  updateApplication: async (id, application) => {\n    const response = await fetch(`${API_URL}/applications/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(application)\n    });\n    return response.json();\n  },\n  deleteApplication: async id => {\n    const response = await fetch(`${API_URL}/applications/${id}`, {\n      method: 'DELETE'\n    });\n    return response.json();\n  },\n  // Users\n  getUsers: async () => {\n    const response = await fetch(`${API_URL}/users`);\n    return response.json();\n  },\n  createUser: async user => {\n    const response = await fetch(`${API_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(user)\n    });\n    return response.json();\n  },\n  // Secrets\n  getSecrets: async () => {\n    const response = await fetch(`${API_URL}/secrets`);\n    return response.json();\n  },\n  createSecret: async secret => {\n    const response = await fetch(`${API_URL}/secrets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(secret)\n    });\n    return response.json();\n  }\n};","map":{"version":3,"names":["API_URL","api","getApplications","response","fetch","json","createApplication","application","method","headers","body","JSON","stringify","updateApplication","id","deleteApplication","getUsers","createUser","user","getSecrets","createSecret","secret"],"sources":["/Users/jaysingh/sample2/src/services/api.js"],"sourcesContent":["const API_URL = 'http://localhost:5000/api';\n\nexport const api = {\n  // Applications\n  getApplications: async () => {\n    const response = await fetch(`${API_URL}/applications`);\n    return response.json();\n  },\n\n  createApplication: async (application) => {\n    const response = await fetch(`${API_URL}/applications`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(application),\n    });\n    return response.json();\n  },\n\n  updateApplication: async (id, application) => {\n    const response = await fetch(`${API_URL}/applications/${id}`, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(application),\n    });\n    return response.json();\n  },\n\n  deleteApplication: async (id) => {\n    const response = await fetch(`${API_URL}/applications/${id}`, {\n      method: 'DELETE',\n    });\n    return response.json();\n  },\n\n  // Users\n  getUsers: async () => {\n    const response = await fetch(`${API_URL}/users`);\n    return response.json();\n  },\n\n  createUser: async (user) => {\n    const response = await fetch(`${API_URL}/users`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(user),\n    });\n    return response.json();\n  },\n\n  // Secrets\n  getSecrets: async () => {\n    const response = await fetch(`${API_URL}/secrets`);\n    return response.json();\n  },\n\n  createSecret: async (secret) => {\n    const response = await fetch(`${API_URL}/secrets`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(secret),\n    });\n    return response.json();\n  },\n}; "],"mappings":"AAAA,MAAMA,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,GAAG,GAAG;EACjB;EACAC,eAAe,EAAE,MAAAA,CAAA,KAAY;IAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,eAAe,CAAC;IACvD,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDC,iBAAiB,EAAE,MAAOC,WAAW,IAAK;IACxC,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,eAAe,EAAE;MACtDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDQ,iBAAiB,EAAE,MAAAA,CAAOC,EAAE,EAAEP,WAAW,KAAK;IAC5C,MAAMJ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,iBAAiBc,EAAE,EAAE,EAAE;MAC5DN,MAAM,EAAE,KAAK;MACbC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,WAAW;IAClC,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDU,iBAAiB,EAAE,MAAOD,EAAE,IAAK;IAC/B,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,iBAAiBc,EAAE,EAAE,EAAE;MAC5DN,MAAM,EAAE;IACV,CAAC,CAAC;IACF,OAAOL,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACAW,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,CAAC;IAChD,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDY,UAAU,EAAE,MAAOC,IAAI,IAAK;IAC1B,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,QAAQ,EAAE;MAC/CQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACM,IAAI;IAC3B,CAAC,CAAC;IACF,OAAOf,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAED;EACAc,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAU,CAAC;IAClD,OAAOG,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB,CAAC;EAEDe,YAAY,EAAE,MAAOC,MAAM,IAAK;IAC9B,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGJ,OAAO,UAAU,EAAE;MACjDQ,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,MAAM;IAC7B,CAAC,CAAC;IACF,OAAOlB,QAAQ,CAACE,IAAI,CAAC,CAAC;EACxB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}