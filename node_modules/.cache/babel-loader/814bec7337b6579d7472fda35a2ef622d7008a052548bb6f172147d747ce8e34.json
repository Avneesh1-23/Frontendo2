{"ast":null,"code":"import { Builder, By, until } from 'selenium-webdriver';\nimport chrome from 'selenium-webdriver/chrome';\nclass CredentialAutofillService {\n  constructor() {\n    this.driver = null;\n  }\n  async initialize() {\n    const options = new chrome.Options();\n    options.addArguments('--headless'); // Run in headless mode\n    options.addArguments('--no-sandbox');\n    options.addArguments('--disable-dev-shm-usage');\n    this.driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();\n  }\n  async autofillCredentials(appUrl, credentials) {\n    try {\n      if (!this.driver) {\n        await this.initialize();\n      }\n      await this.driver.get(appUrl);\n\n      // Wait for the page to load\n      await this.driver.wait(until.elementLocated(By.tagName('body')), 10000);\n\n      // Common selectors for username/password fields\n      const usernameSelectors = ['input[type=\"email\"]', 'input[name=\"username\"]', 'input[name=\"email\"]', 'input[id=\"username\"]', 'input[id=\"email\"]'];\n      const passwordSelectors = ['input[type=\"password\"]', 'input[name=\"password\"]', 'input[id=\"password\"]'];\n\n      // Try to find and fill username field\n      for (const selector of usernameSelectors) {\n        try {\n          const usernameField = await this.driver.findElement(By.css(selector));\n          await usernameField.clear();\n          await usernameField.sendKeys(credentials.username);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and fill password field\n      for (const selector of passwordSelectors) {\n        try {\n          const passwordField = await this.driver.findElement(By.css(selector));\n          await passwordField.clear();\n          await passwordField.sendKeys(credentials.password);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and click submit button\n      const submitSelectors = ['button[type=\"submit\"]', 'input[type=\"submit\"]', 'button:contains(\"Login\")', 'button:contains(\"Sign in\")'];\n      for (const selector of submitSelectors) {\n        try {\n          const submitButton = await this.driver.findElement(By.css(selector));\n          await submitButton.click();\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Wait for navigation after login\n      await this.driver.wait(until.urlContains('dashboard') || until.urlContains('home'), 10000);\n      return true;\n    } catch (error) {\n      console.error('Error during credential autofill:', error);\n      return false;\n    }\n  }\n  async cleanup() {\n    if (this.driver) {\n      await this.driver.quit();\n      this.driver = null;\n    }\n  }\n}\nexport const credentialAutofillService = new CredentialAutofillService();","map":{"version":3,"names":["Builder","By","until","chrome","CredentialAutofillService","constructor","driver","initialize","options","Options","addArguments","forBrowser","setChromeOptions","build","autofillCredentials","appUrl","credentials","get","wait","elementLocated","tagName","usernameSelectors","passwordSelectors","selector","usernameField","findElement","css","clear","sendKeys","username","e","passwordField","password","submitSelectors","submitButton","click","urlContains","error","console","cleanup","quit","credentialAutofillService"],"sources":["/Users/jaysingh/sample2/src/services/credentialAutofill.js"],"sourcesContent":["import { Builder, By, until } from 'selenium-webdriver';\nimport chrome from 'selenium-webdriver/chrome';\n\nclass CredentialAutofillService {\n  constructor() {\n    this.driver = null;\n  }\n\n  async initialize() {\n    const options = new chrome.Options();\n    options.addArguments('--headless'); // Run in headless mode\n    options.addArguments('--no-sandbox');\n    options.addArguments('--disable-dev-shm-usage');\n\n    this.driver = await new Builder()\n      .forBrowser('chrome')\n      .setChromeOptions(options)\n      .build();\n  }\n\n  async autofillCredentials(appUrl, credentials) {\n    try {\n      if (!this.driver) {\n        await this.initialize();\n      }\n\n      await this.driver.get(appUrl);\n\n      // Wait for the page to load\n      await this.driver.wait(until.elementLocated(By.tagName('body')), 10000);\n\n      // Common selectors for username/password fields\n      const usernameSelectors = [\n        'input[type=\"email\"]',\n        'input[name=\"username\"]',\n        'input[name=\"email\"]',\n        'input[id=\"username\"]',\n        'input[id=\"email\"]'\n      ];\n\n      const passwordSelectors = [\n        'input[type=\"password\"]',\n        'input[name=\"password\"]',\n        'input[id=\"password\"]'\n      ];\n\n      // Try to find and fill username field\n      for (const selector of usernameSelectors) {\n        try {\n          const usernameField = await this.driver.findElement(By.css(selector));\n          await usernameField.clear();\n          await usernameField.sendKeys(credentials.username);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and fill password field\n      for (const selector of passwordSelectors) {\n        try {\n          const passwordField = await this.driver.findElement(By.css(selector));\n          await passwordField.clear();\n          await passwordField.sendKeys(credentials.password);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and click submit button\n      const submitSelectors = [\n        'button[type=\"submit\"]',\n        'input[type=\"submit\"]',\n        'button:contains(\"Login\")',\n        'button:contains(\"Sign in\")'\n      ];\n\n      for (const selector of submitSelectors) {\n        try {\n          const submitButton = await this.driver.findElement(By.css(selector));\n          await submitButton.click();\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Wait for navigation after login\n      await this.driver.wait(until.urlContains('dashboard') || until.urlContains('home'), 10000);\n\n      return true;\n    } catch (error) {\n      console.error('Error during credential autofill:', error);\n      return false;\n    }\n  }\n\n  async cleanup() {\n    if (this.driver) {\n      await this.driver.quit();\n      this.driver = null;\n    }\n  }\n}\n\nexport const credentialAutofillService = new CredentialAutofillService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}