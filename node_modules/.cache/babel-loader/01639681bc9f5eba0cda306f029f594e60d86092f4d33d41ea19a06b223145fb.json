{"ast":null,"code":"import { Builder, By, until } from 'selenium-webdriver';\nimport chrome from 'selenium-webdriver/chrome';\nclass SeleniumService {\n  constructor() {\n    this.driver = null;\n  }\n  async initialize() {\n    if (!this.driver) {\n      const options = new chrome.Options();\n      options.addArguments('--headless'); // Run in headless mode\n      options.addArguments('--no-sandbox');\n      options.addArguments('--disable-dev-shm-usage');\n      this.driver = await new Builder().forBrowser('chrome').setChromeOptions(options).build();\n    }\n  }\n  async autofillCredentials(url, credentials) {\n    try {\n      await this.initialize();\n      await this.driver.get(url);\n\n      // Wait for the page to load\n      await this.driver.wait(until.elementLocated(By.tagName('body')), 10000);\n\n      // Common login form field selectors\n      const selectors = {\n        username: ['#username', '#email', 'input[type=\"email\"]', 'input[name=\"username\"]', 'input[name=\"email\"]'],\n        password: ['#password', 'input[type=\"password\"]', 'input[name=\"password\"]'],\n        submit: ['button[type=\"submit\"]', 'input[type=\"submit\"]', '#login-button', '.login-button']\n      };\n\n      // Try to find and fill username field\n      for (const selector of selectors.username) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.clear();\n          await element.sendKeys(credentials.username);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and fill password field\n      for (const selector of selectors.password) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.clear();\n          await element.sendKeys(credentials.password);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and click submit button\n      for (const selector of selectors.submit) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.click();\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Wait for navigation or success indicator\n      await this.driver.wait(until.urlContains('dashboard') || until.urlContains('home'), 10000);\n      return true;\n    } catch (error) {\n      console.error('Error in autofillCredentials:', error);\n      return false;\n    }\n  }\n  async cleanup() {\n    if (this.driver) {\n      await this.driver.quit();\n      this.driver = null;\n    }\n  }\n}\nexport const seleniumService = new SeleniumService();","map":{"version":3,"names":["Builder","By","until","chrome","SeleniumService","constructor","driver","initialize","options","Options","addArguments","forBrowser","setChromeOptions","build","autofillCredentials","url","credentials","get","wait","elementLocated","tagName","selectors","username","password","submit","selector","element","findElement","css","clear","sendKeys","e","click","urlContains","error","console","cleanup","quit","seleniumService"],"sources":["/Users/jaysingh/sample2/src/services/seleniumService.js"],"sourcesContent":["import { Builder, By, until } from 'selenium-webdriver';\nimport chrome from 'selenium-webdriver/chrome';\n\nclass SeleniumService {\n  constructor() {\n    this.driver = null;\n  }\n\n  async initialize() {\n    if (!this.driver) {\n      const options = new chrome.Options();\n      options.addArguments('--headless'); // Run in headless mode\n      options.addArguments('--no-sandbox');\n      options.addArguments('--disable-dev-shm-usage');\n      \n      this.driver = await new Builder()\n        .forBrowser('chrome')\n        .setChromeOptions(options)\n        .build();\n    }\n  }\n\n  async autofillCredentials(url, credentials) {\n    try {\n      await this.initialize();\n      await this.driver.get(url);\n\n      // Wait for the page to load\n      await this.driver.wait(until.elementLocated(By.tagName('body')), 10000);\n\n      // Common login form field selectors\n      const selectors = {\n        username: ['#username', '#email', 'input[type=\"email\"]', 'input[name=\"username\"]', 'input[name=\"email\"]'],\n        password: ['#password', 'input[type=\"password\"]', 'input[name=\"password\"]'],\n        submit: ['button[type=\"submit\"]', 'input[type=\"submit\"]', '#login-button', '.login-button']\n      };\n\n      // Try to find and fill username field\n      for (const selector of selectors.username) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.clear();\n          await element.sendKeys(credentials.username);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and fill password field\n      for (const selector of selectors.password) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.clear();\n          await element.sendKeys(credentials.password);\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Try to find and click submit button\n      for (const selector of selectors.submit) {\n        try {\n          const element = await this.driver.findElement(By.css(selector));\n          await element.click();\n          break;\n        } catch (e) {\n          continue;\n        }\n      }\n\n      // Wait for navigation or success indicator\n      await this.driver.wait(until.urlContains('dashboard') || until.urlContains('home'), 10000);\n\n      return true;\n    } catch (error) {\n      console.error('Error in autofillCredentials:', error);\n      return false;\n    }\n  }\n\n  async cleanup() {\n    if (this.driver) {\n      await this.driver.quit();\n      this.driver = null;\n    }\n  }\n}\n\nexport const seleniumService = new SeleniumService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}